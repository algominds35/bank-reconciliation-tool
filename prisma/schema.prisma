generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QboConnection {
  id                    String   @id @default(cuid())
  userId                String
  realmId               String
  accessTokenEncrypted  String
  refreshTokenEncrypted String
  accessTokenExpiresAt  DateTime
  lastSyncAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  syncStatus            String   @default("idle") // idle | running | failed | completed

  @@unique([userId, realmId], name: "userId_realmId")
}

model QboAccount {
  id             String   @id @default(cuid())
  userId         String
  realmId        String
  qboId          String
  name           String
  accountType    String
  accountSubType String?
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId, realmId])
  @@unique([realmId, qboId], name: "realmId_qboId")
}

model QboTransaction {
  id          String   @id @default(cuid())
  userId      String
  realmId     String
  entityType  String   // Payment, Invoice, Purchase, JournalEntry, etc.
  qboId       String   // Txn Id
  docNumber   String?  // DocNumber or RefNumber
  txnDate     DateTime
  amount      Decimal  @db.Decimal(18, 2)
  description String?
  accountRef  String?
  reconciled  Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, realmId, txnDate])
  @@unique([realmId, qboId], name: "realmId_qboId_txn")
}

model SyncJob {
  id          String   @id @default(cuid())
  userId      String
  realmId     String
  jobType     String   // daily or full
  status      String   @default("queued") // queued | running | completed | failed
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, realmId, jobType])
}